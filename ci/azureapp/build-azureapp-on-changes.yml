trigger:
  branches:
    include: ['feature/*']
  paths:
    include: ['src/azureapp/']

name: 'build-azureapp-on-changes'
variables:
  revision:
  # We use a 'shared' management environment to host docker containers.
  # This would ensure that production would get the same image that was tested on staging
  environment: 'management'
  stage:       'truehhart'
  appName:     'azureapp'

stages:
# This stage is focused around building the application.
# We could also sqeeze in the deployment in here, but generally in practice it proved better to split resources logically.
# As such, I have decided to have CI and CD pipelines to be separate.
- stage: 'build'
  displayName: 'Building $(appName)'
  jobs:
  - job: 'get_git_revision'
    pool: 'localhost'
    steps:
    # I want all containers to not only be tagged with the build order number, but also include the git revision.
    # Helps with identification and can be used in the future for troubleshooting, etc.
      - task: CmdLine@2
        displayName: '[Build] Getting current git revision'
        inputs:
          script: 'x=`echo "$(Build.SourceVersion)" | head -c 7`; echo "##vso[task.setvariable variable=revision]$x"'

  - job: 'build_and_push_container'
    pool: 'localhost'
    steps:
      - task: Docker@2
        displayName: '[Build] Building ${{ variables.appName}} container image'
        inputs:
          command: 'build'
          repository: '$(Build.Repository.Name)'
          Dockerfile: 'build/dockerfiles/$(appName).Dockerfile'
          buildContext: '$(Build.Repository.LocalPath)'
          containerRegistry: '$(environment)$(stage)ContainerRegistry'
          tags: '$(Build.BuildId).$(revision)'

      # Note that we are pushing the container to the management repository.
      - task: Docker@2
        displayName: '[Build] Pushing ${{ variables.appName }}:${{ variables.Build.BuildId }}.${{ variables.revision }} to container registry'
        inputs:
          command: push
          repository: '$(Build.Repository.Name)'
          buildContext: '$(Build.Repository.LocalPath)'
          containerRegistry: '$(environment)$(stage)ContainerRegistry'
          tags: '$(Build.BuildId).$(revision)'